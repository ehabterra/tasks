// Code generated by goa v3.2.3, DO NOT EDIT.
//
// tasks views
//
// Command:
// $ goa gen tasks/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// StoredTaskCollection is the viewed result type that is projected based on a
// view.
type StoredTaskCollection struct {
	// Type to project
	Projected StoredTaskCollectionView
	// View to render
	View string
}

// StoredTask is the viewed result type that is projected based on a view.
type StoredTask struct {
	// Type to project
	Projected *StoredTaskView
	// View to render
	View string
}

// StoredTaskCollectionView is a type that runs validations on a projected type.
type StoredTaskCollectionView []*StoredTaskView

// StoredTaskView is a type that runs validations on a projected type.
type StoredTaskView struct {
	ID *string
	// Title of the task
	Title *string
	// Description of the task
	Description *string
	// Created date
	CreatedDate *string
	// Udated date
	UpdatedDate *string
	// due date
	DueDate *string
	// Status.
	Status *string
	// Owner.
	Owner *StoredUserView
	// Assignee.
	Assignee *StoredUserView
}

// StoredUserView is a type that runs validations on a projected type.
type StoredUserView struct {
	// Email of the user
	Email *string
	// First Name of the user
	Firstname *string
	// Last Name of user
	Lastname *string
	// Is user active.
	Isactive *bool
	// user role
	Role *string
}

var (
	// StoredTaskCollectionMap is a map of attribute names in result type
	// StoredTaskCollection indexed by view name.
	StoredTaskCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"title",
			"description",
			"created_date",
			"updated_date",
			"due_date",
			"status",
			"owner",
			"assignee",
		},
		"tiny": []string{
			"id",
			"title",
			"assignee",
			"status",
		},
	}
	// StoredTaskMap is a map of attribute names in result type StoredTask indexed
	// by view name.
	StoredTaskMap = map[string][]string{
		"default": []string{
			"id",
			"title",
			"description",
			"created_date",
			"updated_date",
			"due_date",
			"status",
			"owner",
			"assignee",
		},
		"tiny": []string{
			"id",
			"title",
			"assignee",
			"status",
		},
	}
	// StoredUserMap is a map of attribute names in result type StoredUser indexed
	// by view name.
	StoredUserMap = map[string][]string{
		"default": []string{
			"email",
			"role",
			"firstname",
			"lastname",
			"isactive",
		},
		"tiny": []string{
			"email",
			"role",
			"isactive",
		},
	}
)

// ValidateStoredTaskCollection runs the validations defined on the viewed
// result type StoredTaskCollection.
func ValidateStoredTaskCollection(result StoredTaskCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredTaskCollectionView(result.Projected)
	case "tiny":
		err = ValidateStoredTaskCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredTask runs the validations defined on the viewed result type
// StoredTask.
func ValidateStoredTask(result *StoredTask) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredTaskView(result.Projected)
	case "tiny":
		err = ValidateStoredTaskViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredTaskCollectionView runs the validations defined on
// StoredTaskCollectionView using the "default" view.
func ValidateStoredTaskCollectionView(result StoredTaskCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredTaskView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredTaskCollectionViewTiny runs the validations defined on
// StoredTaskCollectionView using the "tiny" view.
func ValidateStoredTaskCollectionViewTiny(result StoredTaskCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredTaskViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredTaskView runs the validations defined on StoredTaskView using
// the "default" view.
func ValidateStoredTaskView(result *StoredTaskView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.CreatedDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_date", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.UpdatedDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_date", "result"))
	}
	if result.Title != nil {
		if utf8.RuneCountInString(*result.Title) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.title", *result.Title, utf8.RuneCountInString(*result.Title), 200, false))
		}
	}
	if result.Description != nil {
		if utf8.RuneCountInString(*result.Description) > 5000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.description", *result.Description, utf8.RuneCountInString(*result.Description), 5000, false))
		}
	}
	if result.CreatedDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_date", *result.CreatedDate, goa.FormatDateTime))
	}
	if result.UpdatedDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_date", *result.UpdatedDate, goa.FormatDateTime))
	}
	if result.DueDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.due_date", *result.DueDate, goa.FormatDateTime))
	}
	if result.Status != nil {
		if !(*result.Status == "Open" || *result.Status == "Closed" || *result.Status == "Pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Open", "Closed", "Pending"}))
		}
	}
	if result.Owner != nil {
		if err2 := ValidateStoredUserViewTiny(result.Owner); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Assignee != nil {
		if err2 := ValidateStoredUserViewTiny(result.Assignee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredTaskViewTiny runs the validations defined on StoredTaskView
// using the "tiny" view.
func ValidateStoredTaskViewTiny(result *StoredTaskView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.Title != nil {
		if utf8.RuneCountInString(*result.Title) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.title", *result.Title, utf8.RuneCountInString(*result.Title), 200, false))
		}
	}
	if result.Status != nil {
		if !(*result.Status == "Open" || *result.Status == "Closed" || *result.Status == "Pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Open", "Closed", "Pending"}))
		}
	}
	if result.Assignee != nil {
		if err2 := ValidateStoredUserViewTiny(result.Assignee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredUserView runs the validations defined on StoredUserView using
// the "default" view.
func ValidateStoredUserView(result *StoredUserView) (err error) {
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "result"))
	}
	if result.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "result"))
	}
	if result.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "result"))
	}
	if result.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.email", *result.Email, ".+@.+\\..{1,6}"))
	}
	if result.Role != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.role", *result.Role, "[a-z]+[a-z0-9]*"))
	}
	if result.Firstname != nil {
		if utf8.RuneCountInString(*result.Firstname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.firstname", *result.Firstname, utf8.RuneCountInString(*result.Firstname), 100, false))
		}
	}
	if result.Lastname != nil {
		if utf8.RuneCountInString(*result.Lastname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.lastname", *result.Lastname, utf8.RuneCountInString(*result.Lastname), 100, false))
		}
	}
	return
}

// ValidateStoredUserViewTiny runs the validations defined on StoredUserView
// using the "tiny" view.
func ValidateStoredUserViewTiny(result *StoredUserView) (err error) {
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "result"))
	}
	if result.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.email", *result.Email, ".+@.+\\..{1,6}"))
	}
	if result.Role != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.role", *result.Role, "[a-z]+[a-z0-9]*"))
	}
	return
}
