// Code generated by goa v3.2.3, DO NOT EDIT.
//
// tasks HTTP client types
//
// Command:
// $ goa gen tasks/design

package client

import (
	tasks "tasks/gen/tasks"
	tasksviews "tasks/gen/tasks/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "tasks" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Title of the task
	Title string `form:"title" json:"title" xml:"title"`
	// Description of the task
	Description string `form:"description" json:"description" xml:"description"`
	// Created date
	CreatedDate string `form:"created_date" json:"created_date" xml:"created_date"`
	// Udated date
	UpdatedDate string `form:"updated_date" json:"updated_date" xml:"updated_date"`
	// due date
	DueDate *string `form:"due_date,omitempty" json:"due_date,omitempty" xml:"due_date,omitempty"`
	// Status.
	Status string `form:"status" json:"status" xml:"status"`
	// Owner.
	Owner *StoredUserRequestBody `form:"owner,omitempty" json:"owner,omitempty" xml:"owner,omitempty"`
	// Assignee.
	Assignee *StoredUserRequestBody `form:"assignee,omitempty" json:"assignee,omitempty" xml:"assignee,omitempty"`
}

// UpdateRequestBody is the type of the "tasks" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	Task *StoredTaskRequestBody `form:"task" json:"task" xml:"task"`
}

// StatusRequestBody is the type of the "tasks" service "status" endpoint HTTP
// request body.
type StatusRequestBody struct {
	// ID of task
	ID string `form:"id" json:"id" xml:"id"`
	// Status.
	Status string `form:"status" json:"status" xml:"status"`
}

// ListResponseBody is the type of the "tasks" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredTaskResponse

// ShowResponseBody is the type of the "tasks" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the task
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Description of the task
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Created date
	CreatedDate *string `form:"created_date,omitempty" json:"created_date,omitempty" xml:"created_date,omitempty"`
	// Udated date
	UpdatedDate *string `form:"updated_date,omitempty" json:"updated_date,omitempty" xml:"updated_date,omitempty"`
	// due date
	DueDate *string `form:"due_date,omitempty" json:"due_date,omitempty" xml:"due_date,omitempty"`
	// Status.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Owner.
	Owner *StoredUserResponseBody `form:"owner,omitempty" json:"owner,omitempty" xml:"owner,omitempty"`
	// Assignee.
	Assignee *StoredUserResponseBody `form:"assignee,omitempty" json:"assignee,omitempty" xml:"assignee,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "tasks" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing task
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// StoredTaskResponse is used to define fields on response body types.
type StoredTaskResponse struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the task
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Description of the task
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Created date
	CreatedDate *string `form:"created_date,omitempty" json:"created_date,omitempty" xml:"created_date,omitempty"`
	// Udated date
	UpdatedDate *string `form:"updated_date,omitempty" json:"updated_date,omitempty" xml:"updated_date,omitempty"`
	// due date
	DueDate *string `form:"due_date,omitempty" json:"due_date,omitempty" xml:"due_date,omitempty"`
	// Status.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Owner.
	Owner *StoredUserResponse `form:"owner,omitempty" json:"owner,omitempty" xml:"owner,omitempty"`
	// Assignee.
	Assignee *StoredUserResponse `form:"assignee,omitempty" json:"assignee,omitempty" xml:"assignee,omitempty"`
}

// StoredUserResponse is used to define fields on response body types.
type StoredUserResponse struct {
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First Name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last Name of user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	// Is user active.
	Isactive *bool `form:"isactive,omitempty" json:"isactive,omitempty" xml:"isactive,omitempty"`
	// user role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
}

// StoredUserResponseBody is used to define fields on response body types.
type StoredUserResponseBody struct {
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First Name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last Name of user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	// Is user active.
	Isactive *bool `form:"isactive,omitempty" json:"isactive,omitempty" xml:"isactive,omitempty"`
	// user role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
}

// StoredUserRequestBody is used to define fields on request body types.
type StoredUserRequestBody struct {
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First Name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last Name of user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
	// Is user active.
	Isactive bool `form:"isactive" json:"isactive" xml:"isactive"`
	// user role
	Role string `form:"role" json:"role" xml:"role"`
}

// StoredTaskRequestBody is used to define fields on request body types.
type StoredTaskRequestBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// Title of the task
	Title string `form:"title" json:"title" xml:"title"`
	// Description of the task
	Description string `form:"description" json:"description" xml:"description"`
	// Created date
	CreatedDate string `form:"created_date" json:"created_date" xml:"created_date"`
	// Udated date
	UpdatedDate string `form:"updated_date" json:"updated_date" xml:"updated_date"`
	// due date
	DueDate *string `form:"due_date,omitempty" json:"due_date,omitempty" xml:"due_date,omitempty"`
	// Status.
	Status string `form:"status" json:"status" xml:"status"`
	// Owner.
	Owner *StoredUserRequestBody `form:"owner" json:"owner" xml:"owner"`
	// Assignee.
	Assignee *StoredUserRequestBody `form:"assignee,omitempty" json:"assignee,omitempty" xml:"assignee,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "tasks" service.
func NewAddRequestBody(p *tasks.Task) *AddRequestBody {
	body := &AddRequestBody{
		Title:       p.Title,
		Description: p.Description,
		CreatedDate: p.CreatedDate,
		UpdatedDate: p.UpdatedDate,
		DueDate:     p.DueDate,
		Status:      p.Status,
	}
	if p.Owner != nil {
		body.Owner = marshalTasksStoredUserToStoredUserRequestBody(p.Owner)
	}
	if p.Assignee != nil {
		body.Assignee = marshalTasksStoredUserToStoredUserRequestBody(p.Assignee)
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "tasks" service.
func NewUpdateRequestBody(p *tasks.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.Task != nil {
		body.Task = marshalTasksStoredTaskToStoredTaskRequestBody(p.Task)
	}
	return body
}

// NewStatusRequestBody builds the HTTP request body from the payload of the
// "status" endpoint of the "tasks" service.
func NewStatusRequestBody(p *tasks.StatusPayload) *StatusRequestBody {
	body := &StatusRequestBody{
		ID:     p.ID,
		Status: p.Status,
	}
	return body
}

// NewListStoredTaskCollectionOK builds a "tasks" service "list" endpoint
// result from a HTTP "OK" response.
func NewListStoredTaskCollectionOK(body ListResponseBody) tasksviews.StoredTaskCollectionView {
	v := make([]*tasksviews.StoredTaskView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredTaskResponseToTasksviewsStoredTaskView(val)
	}
	return v
}

// NewShowStoredTaskOK builds a "tasks" service "show" endpoint result from a
// HTTP "OK" response.
func NewShowStoredTaskOK(body *ShowResponseBody) *tasksviews.StoredTaskView {
	v := &tasksviews.StoredTaskView{
		ID:          body.ID,
		Title:       body.Title,
		Description: body.Description,
		CreatedDate: body.CreatedDate,
		UpdatedDate: body.UpdatedDate,
		DueDate:     body.DueDate,
		Status:      body.Status,
	}
	v.Owner = unmarshalStoredUserResponseBodyToTasksviewsStoredUserView(body.Owner)
	if body.Assignee != nil {
		v.Assignee = unmarshalStoredUserResponseBodyToTasksviewsStoredUserView(body.Assignee)
	}

	return v
}

// NewShowNotFound builds a tasks service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *tasks.NotFound {
	v := &tasks.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateStoredTaskResponse runs the validations defined on StoredTaskResponse
func ValidateStoredTaskResponse(body *StoredTaskResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CreatedDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_date", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Owner == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("owner", "body"))
	}
	if body.UpdatedDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_date", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 200, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 5000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 5000, false))
		}
	}
	if body.CreatedDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_date", *body.CreatedDate, goa.FormatDateTime))
	}
	if body.UpdatedDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_date", *body.UpdatedDate, goa.FormatDateTime))
	}
	if body.DueDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.due_date", *body.DueDate, goa.FormatDateTime))
	}
	if body.Status != nil {
		if !(*body.Status == "Open" || *body.Status == "Closed" || *body.Status == "Pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Open", "Closed", "Pending"}))
		}
	}
	if body.Owner != nil {
		if err2 := ValidateStoredUserResponse(body.Owner); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Assignee != nil {
		if err2 := ValidateStoredUserResponse(body.Assignee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredUserResponse runs the validations defined on StoredUserResponse
func ValidateStoredUserResponse(body *StoredUserResponse) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", *body.Email, ".+@.+\\..{1,6}"))
	}
	if body.Firstname != nil {
		if utf8.RuneCountInString(*body.Firstname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", *body.Firstname, utf8.RuneCountInString(*body.Firstname), 100, false))
		}
	}
	if body.Lastname != nil {
		if utf8.RuneCountInString(*body.Lastname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", *body.Lastname, utf8.RuneCountInString(*body.Lastname), 100, false))
		}
	}
	if body.Role != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.role", *body.Role, "[a-z]+[a-z0-9]*"))
	}
	return
}

// ValidateStoredUserResponseBody runs the validations defined on
// StoredUserResponseBody
func ValidateStoredUserResponseBody(body *StoredUserResponseBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", *body.Email, ".+@.+\\..{1,6}"))
	}
	if body.Firstname != nil {
		if utf8.RuneCountInString(*body.Firstname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", *body.Firstname, utf8.RuneCountInString(*body.Firstname), 100, false))
		}
	}
	if body.Lastname != nil {
		if utf8.RuneCountInString(*body.Lastname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", *body.Lastname, utf8.RuneCountInString(*body.Lastname), 100, false))
		}
	}
	if body.Role != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.role", *body.Role, "[a-z]+[a-z0-9]*"))
	}
	return
}

// ValidateStoredUserRequestBody runs the validations defined on
// StoredUserRequestBody
func ValidateStoredUserRequestBody(body *StoredUserRequestBody) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("body.email", body.Email, ".+@.+\\..{1,6}"))
	if utf8.RuneCountInString(body.Firstname) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", body.Firstname, utf8.RuneCountInString(body.Firstname), 100, false))
	}
	if utf8.RuneCountInString(body.Lastname) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", body.Lastname, utf8.RuneCountInString(body.Lastname), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.role", body.Role, "[a-z]+[a-z0-9]*"))
	return
}

// ValidateStoredTaskRequestBody runs the validations defined on
// StoredTaskRequestBody
func ValidateStoredTaskRequestBody(body *StoredTaskRequestBody) (err error) {
	if body.Owner == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("owner", "body"))
	}
	if utf8.RuneCountInString(body.Title) > 200 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 200, false))
	}
	if utf8.RuneCountInString(body.Description) > 5000 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", body.Description, utf8.RuneCountInString(body.Description), 5000, false))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("body.created_date", body.CreatedDate, goa.FormatDateTime))

	err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_date", body.UpdatedDate, goa.FormatDateTime))

	if body.DueDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.due_date", *body.DueDate, goa.FormatDateTime))
	}
	if !(body.Status == "Open" || body.Status == "Closed" || body.Status == "Pending") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", body.Status, []interface{}{"Open", "Closed", "Pending"}))
	}
	if body.Owner != nil {
		if err2 := ValidateStoredUserRequestBody(body.Owner); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Assignee != nil {
		if err2 := ValidateStoredUserRequestBody(body.Assignee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
