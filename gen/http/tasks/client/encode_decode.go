// Code generated by goa v3.2.3, DO NOT EDIT.
//
// tasks HTTP client encoders and decoders
//
// Command:
// $ goa gen tasks/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	tasks "tasks/gen/tasks"
	tasksviews "tasks/gen/tasks/views"

	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "tasks" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListTasksPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the tasks list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasks.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("tasks", "list", "*tasks.ListPayload", v)
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the tasks
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "list", err)
			}
			p := NewListStoredTaskCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := tasksviews.StoredTaskCollection{Projected: p, View: view}
			if err = tasksviews.ValidateStoredTaskCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("tasks", "list", err)
			}
			res := tasks.NewStoredTaskCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "tasks" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*tasks.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("tasks", "show", "*tasks.ShowPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowTasksPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the tasks show
// server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasks.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("tasks", "show", "*tasks.ShowPayload", v)
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the tasks
// show endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *tasks.NotFound): http.StatusNotFound
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "show", err)
			}
			p := NewShowStoredTaskOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &tasksviews.StoredTask{Projected: p, View: view}
			if err = tasksviews.ValidateStoredTask(vres); err != nil {
				return nil, goahttp.ErrValidationError("tasks", "show", err)
			}
			res := tasks.NewStoredTask(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tasks", "show", err)
			}
			return nil, NewShowNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "tasks" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddTasksPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddRequest returns an encoder for requests sent to the tasks add
// server.
func EncodeAddRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasks.Task)
		if !ok {
			return goahttp.ErrInvalidType("tasks", "add", "*tasks.Task", v)
		}
		body := NewAddRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tasks", "add", err)
		}
		return nil
	}
}

// DecodeAddResponse returns a decoder for responses returned by the tasks add
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "add", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "tasks" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*tasks.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("tasks", "update", "*tasks.UpdatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateTasksPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the tasks update
// server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasks.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("tasks", "update", "*tasks.UpdatePayload", v)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tasks", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the tasks
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tasks", "update", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveRequest instantiates a HTTP request object with method and path
// set to call the "tasks" service "remove" endpoint
func (c *Client) BuildRemoveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*tasks.RemovePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("tasks", "remove", "*tasks.RemovePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveTasksPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks", "remove", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRemoveResponse returns a decoder for responses returned by the tasks
// remove endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeRemoveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks", "remove", resp.StatusCode, string(body))
		}
	}
}

// BuildStatusRequest instantiates a HTTP request object with method and path
// set to call the "tasks" service "status" endpoint
func (c *Client) BuildStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StatusTasksPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tasks", "status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStatusRequest returns an encoder for requests sent to the tasks status
// server.
func EncodeStatusRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tasks.StatusPayload)
		if !ok {
			return goahttp.ErrInvalidType("tasks", "status", "*tasks.StatusPayload", v)
		}
		body := NewStatusRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tasks", "status", err)
		}
		return nil
	}
}

// DecodeStatusResponse returns a decoder for responses returned by the tasks
// status endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tasks", "status", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStoredTaskResponseToTasksviewsStoredTaskView builds a value of type
// *tasksviews.StoredTaskView from a value of type *StoredTaskResponse.
func unmarshalStoredTaskResponseToTasksviewsStoredTaskView(v *StoredTaskResponse) *tasksviews.StoredTaskView {
	res := &tasksviews.StoredTaskView{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		CreatedDate: v.CreatedDate,
		UpdatedDate: v.UpdatedDate,
		DueDate:     v.DueDate,
		Status:      v.Status,
	}
	res.Owner = unmarshalStoredUserResponseToTasksviewsStoredUserView(v.Owner)
	if v.Assignee != nil {
		res.Assignee = unmarshalStoredUserResponseToTasksviewsStoredUserView(v.Assignee)
	}

	return res
}

// unmarshalStoredUserResponseToTasksviewsStoredUserView builds a value of type
// *tasksviews.StoredUserView from a value of type *StoredUserResponse.
func unmarshalStoredUserResponseToTasksviewsStoredUserView(v *StoredUserResponse) *tasksviews.StoredUserView {
	res := &tasksviews.StoredUserView{
		Email:     v.Email,
		Firstname: v.Firstname,
		Lastname:  v.Lastname,
		Isactive:  v.Isactive,
		Role:      v.Role,
	}
	if v.Isactive == nil {
		var tmp bool = true
		res.Isactive = &tmp
	}

	return res
}

// unmarshalStoredUserResponseBodyToTasksviewsStoredUserView builds a value of
// type *tasksviews.StoredUserView from a value of type *StoredUserResponseBody.
func unmarshalStoredUserResponseBodyToTasksviewsStoredUserView(v *StoredUserResponseBody) *tasksviews.StoredUserView {
	res := &tasksviews.StoredUserView{
		Email:     v.Email,
		Firstname: v.Firstname,
		Lastname:  v.Lastname,
		Isactive:  v.Isactive,
		Role:      v.Role,
	}
	if v.Isactive == nil {
		var tmp bool = true
		res.Isactive = &tmp
	}

	return res
}

// marshalTasksStoredUserToStoredUserRequestBody builds a value of type
// *StoredUserRequestBody from a value of type *tasks.StoredUser.
func marshalTasksStoredUserToStoredUserRequestBody(v *tasks.StoredUser) *StoredUserRequestBody {
	if v == nil {
		return nil
	}
	res := &StoredUserRequestBody{
		Email:     v.Email,
		Firstname: v.Firstname,
		Lastname:  v.Lastname,
		Isactive:  v.Isactive,
		Role:      v.Role,
	}

	return res
}

// marshalStoredUserRequestBodyToTasksStoredUser builds a value of type
// *tasks.StoredUser from a value of type *StoredUserRequestBody.
func marshalStoredUserRequestBodyToTasksStoredUser(v *StoredUserRequestBody) *tasks.StoredUser {
	if v == nil {
		return nil
	}
	res := &tasks.StoredUser{
		Email:     v.Email,
		Firstname: v.Firstname,
		Lastname:  v.Lastname,
		Isactive:  v.Isactive,
		Role:      v.Role,
	}

	return res
}

// marshalTasksStoredTaskToStoredTaskRequestBody builds a value of type
// *StoredTaskRequestBody from a value of type *tasks.StoredTask.
func marshalTasksStoredTaskToStoredTaskRequestBody(v *tasks.StoredTask) *StoredTaskRequestBody {
	res := &StoredTaskRequestBody{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		CreatedDate: v.CreatedDate,
		UpdatedDate: v.UpdatedDate,
		DueDate:     v.DueDate,
		Status:      v.Status,
	}
	if v.Owner != nil {
		res.Owner = marshalTasksStoredUserToStoredUserRequestBody(v.Owner)
	}
	if v.Assignee != nil {
		res.Assignee = marshalTasksStoredUserToStoredUserRequestBody(v.Assignee)
	}

	return res
}

// marshalStoredTaskRequestBodyToTasksStoredTask builds a value of type
// *tasks.StoredTask from a value of type *StoredTaskRequestBody.
func marshalStoredTaskRequestBodyToTasksStoredTask(v *StoredTaskRequestBody) *tasks.StoredTask {
	res := &tasks.StoredTask{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		CreatedDate: v.CreatedDate,
		UpdatedDate: v.UpdatedDate,
		DueDate:     v.DueDate,
		Status:      v.Status,
	}
	if v.Owner != nil {
		res.Owner = marshalStoredUserRequestBodyToTasksStoredUser(v.Owner)
	}
	if v.Assignee != nil {
		res.Assignee = marshalStoredUserRequestBodyToTasksStoredUser(v.Assignee)
	}

	return res
}
