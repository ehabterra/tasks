// Code generated by goa v3.2.3, DO NOT EDIT.
//
// tasks HTTP client CLI support package
//
// Command:
// $ goa gen tasks/design

package client

import (
	"encoding/json"
	"fmt"
	tasks "tasks/gen/tasks"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the tasks list endpoint from CLI
// flags.
func BuildListPayload(tasksListView string) (*tasks.ListPayload, error) {
	var err error
	var view *string
	{
		if tasksListView != "" {
			view = &tasksListView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &tasks.ListPayload{}
	v.View = view

	return v, nil
}

// BuildShowPayload builds the payload for the tasks show endpoint from CLI
// flags.
func BuildShowPayload(tasksShowID string, tasksShowView string) (*tasks.ShowPayload, error) {
	var err error
	var id string
	{
		id = tasksShowID
	}
	var view *string
	{
		if tasksShowView != "" {
			view = &tasksShowView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &tasks.ShowPayload{}
	v.ID = id
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the tasks add endpoint from CLI flags.
func BuildAddPayload(tasksAddBody string) (*tasks.Task, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(tasksAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"assignee\": {\n         \"email\": \"ehabterra@hotmail.com\",\n         \"firstname\": \"Ehab\",\n         \"isactive\": false,\n         \"lastname\": \"Terra\",\n         \"role\": \"admin\"\n      },\n      \"created_date\": \"1972-12-11T14:31:10Z\",\n      \"description\": \"Task description\",\n      \"due_date\": \"2001-09-13T00:38:25Z\",\n      \"owner\": {\n         \"email\": \"ehabterra@hotmail.com\",\n         \"firstname\": \"Ehab\",\n         \"isactive\": false,\n         \"lastname\": \"Terra\",\n         \"role\": \"admin\"\n      },\n      \"status\": \"Closed\",\n      \"title\": \"New task title\",\n      \"updated_date\": \"2008-01-17T02:07:49Z\"\n   }'")
		}
		if utf8.RuneCountInString(body.Title) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 200, false))
		}
		if utf8.RuneCountInString(body.Description) > 5000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", body.Description, utf8.RuneCountInString(body.Description), 5000, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_date", body.CreatedDate, goa.FormatDateTime))

		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_date", body.UpdatedDate, goa.FormatDateTime))

		if body.DueDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.due_date", *body.DueDate, goa.FormatDateTime))
		}
		if !(body.Status == "Open" || body.Status == "Closed" || body.Status == "Pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", body.Status, []interface{}{"Open", "Closed", "Pending"}))
		}
		if body.Owner != nil {
			if err2 := ValidateStoredUserRequestBody(body.Owner); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if body.Assignee != nil {
			if err2 := ValidateStoredUserRequestBody(body.Assignee); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &tasks.Task{
		Title:       body.Title,
		Description: body.Description,
		CreatedDate: body.CreatedDate,
		UpdatedDate: body.UpdatedDate,
		DueDate:     body.DueDate,
		Status:      body.Status,
	}
	if body.Owner != nil {
		v.Owner = marshalStoredUserRequestBodyToTasksStoredUser(body.Owner)
	}
	if body.Assignee != nil {
		v.Assignee = marshalStoredUserRequestBodyToTasksStoredUser(body.Assignee)
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the tasks update endpoint from CLI
// flags.
func BuildUpdatePayload(tasksUpdateBody string, tasksUpdateID string) (*tasks.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(tasksUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"task\": {\n         \"assignee\": {\n            \"email\": \"ehabterra@hotmail.com\",\n            \"firstname\": \"Ehab\",\n            \"isactive\": false,\n            \"lastname\": \"Terra\",\n            \"role\": \"admin\"\n         },\n         \"created_date\": \"1977-08-23T17:31:33Z\",\n         \"description\": \"Task description\",\n         \"due_date\": \"1994-02-04T20:22:05Z\",\n         \"id\": \"Dolor eos dolorem numquam odio aspernatur et.\",\n         \"owner\": {\n            \"email\": \"ehabterra@hotmail.com\",\n            \"firstname\": \"Ehab\",\n            \"isactive\": false,\n            \"lastname\": \"Terra\",\n            \"role\": \"admin\"\n         },\n         \"status\": \"Pending\",\n         \"title\": \"New task title\",\n         \"updated_date\": \"1994-11-14T18:35:02Z\"\n      }\n   }'")
		}
		if body.Task == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("task", "body"))
		}
		if body.Task != nil {
			if err2 := ValidateStoredTaskRequestBody(body.Task); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = tasksUpdateID
	}
	v := &tasks.UpdatePayload{}
	if body.Task != nil {
		v.Task = marshalStoredTaskRequestBodyToTasksStoredTask(body.Task)
	}
	v.ID = id

	return v, nil
}

// BuildRemovePayload builds the payload for the tasks remove endpoint from CLI
// flags.
func BuildRemovePayload(tasksRemoveID string) (*tasks.RemovePayload, error) {
	var id string
	{
		id = tasksRemoveID
	}
	v := &tasks.RemovePayload{}
	v.ID = id

	return v, nil
}

// BuildStatusPayload builds the payload for the tasks status endpoint from CLI
// flags.
func BuildStatusPayload(tasksStatusBody string) (*tasks.StatusPayload, error) {
	var err error
	var body StatusRequestBody
	{
		err = json.Unmarshal([]byte(tasksStatusBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Qui dignissimos.\",\n      \"status\": \"Open\"\n   }'")
		}
		if !(body.Status == "Open" || body.Status == "Closed" || body.Status == "Pending") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", body.Status, []interface{}{"Open", "Closed", "Pending"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &tasks.StatusPayload{
		ID:     body.ID,
		Status: body.Status,
	}

	return v, nil
}
