// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"
	tasks "tasks/gen/tasks"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *Service) Add(_a0 context.Context, _a1 *tasks.Task) (int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *tasks.Task) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tasks.Task) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *Service) List(_a0 context.Context, _a1 *tasks.ListPayload) (tasks.StoredTaskCollection, string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 tasks.StoredTaskCollection
	if rf, ok := ret.Get(0).(func(context.Context, *tasks.ListPayload) tasks.StoredTaskCollection); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tasks.StoredTaskCollection)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, *tasks.ListPayload) string); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *tasks.ListPayload) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Remove provides a mock function with given fields: _a0, _a1
func (_m *Service) Remove(_a0 context.Context, _a1 *tasks.RemovePayload) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *tasks.RemovePayload) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Show provides a mock function with given fields: _a0, _a1
func (_m *Service) Show(_a0 context.Context, _a1 *tasks.ShowPayload) (*tasks.StoredTask, string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *tasks.StoredTask
	if rf, ok := ret.Get(0).(func(context.Context, *tasks.ShowPayload) *tasks.StoredTask); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tasks.StoredTask)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, *tasks.ShowPayload) string); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *tasks.ShowPayload) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Status provides a mock function with given fields: _a0, _a1
func (_m *Service) Status(_a0 context.Context, _a1 *tasks.StatusPayload) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *tasks.StatusPayload) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *Service) Update(_a0 context.Context, _a1 *tasks.UpdatePayload) (int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *tasks.UpdatePayload) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tasks.UpdatePayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
