// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	taskspb "tasks/gen/grpc/tasks/pb"
)

// TasksClient is an autogenerated mock type for the TasksClient type
type TasksClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, in, opts
func (_m *TasksClient) Add(ctx context.Context, in *taskspb.AddRequest, opts ...grpc.CallOption) (*taskspb.AddResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *taskspb.AddResponse
	if rf, ok := ret.Get(0).(func(context.Context, *taskspb.AddRequest, ...grpc.CallOption) *taskspb.AddResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*taskspb.AddResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *taskspb.AddRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *TasksClient) List(ctx context.Context, in *taskspb.ListRequest, opts ...grpc.CallOption) (*taskspb.StoredTaskCollection, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *taskspb.StoredTaskCollection
	if rf, ok := ret.Get(0).(func(context.Context, *taskspb.ListRequest, ...grpc.CallOption) *taskspb.StoredTaskCollection); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*taskspb.StoredTaskCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *taskspb.ListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, in, opts
func (_m *TasksClient) Remove(ctx context.Context, in *taskspb.RemoveRequest, opts ...grpc.CallOption) (*taskspb.RemoveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *taskspb.RemoveResponse
	if rf, ok := ret.Get(0).(func(context.Context, *taskspb.RemoveRequest, ...grpc.CallOption) *taskspb.RemoveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*taskspb.RemoveResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *taskspb.RemoveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Show provides a mock function with given fields: ctx, in, opts
func (_m *TasksClient) Show(ctx context.Context, in *taskspb.ShowRequest, opts ...grpc.CallOption) (*taskspb.ShowResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *taskspb.ShowResponse
	if rf, ok := ret.Get(0).(func(context.Context, *taskspb.ShowRequest, ...grpc.CallOption) *taskspb.ShowResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*taskspb.ShowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *taskspb.ShowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: ctx, in, opts
func (_m *TasksClient) Status(ctx context.Context, in *taskspb.StatusRequest, opts ...grpc.CallOption) (*taskspb.StatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *taskspb.StatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *taskspb.StatusRequest, ...grpc.CallOption) *taskspb.StatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*taskspb.StatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *taskspb.StatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *TasksClient) Update(ctx context.Context, in *taskspb.UpdateRequest, opts ...grpc.CallOption) (*taskspb.UpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *taskspb.UpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *taskspb.UpdateRequest, ...grpc.CallOption) *taskspb.UpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*taskspb.UpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *taskspb.UpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
